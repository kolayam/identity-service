server:
  port: ${PORT:9096}
spring:
  application:
    name: identity-service${APPLICATION_NAME_SUFFIX:}
  thymeleaf:
    cache: false
    mode: HTML
  cloud:
    config:
      enabled: ${CONFIG_SERVER_ENABLED:true}
      uri: ${CONFIG_SERVER_URI:http://localhost:8888}
      failFast: ${CONFIG_SERVER_FAILFAST:false}
    discovery:
      enabled: ${DISCOVERY_ENABLED:false}
  jpa:
    show-sql: false
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: ${DDL_AUTO:update}
    properties:
      hibernate:
        type: debug
        temp:
          use_jdbc_metadata_defaults: false
        id:
          new_generator_mappings: true
  datasource:
    name: identitydb
    driverClassName: org.postgresql.Driver
    url: jdbc:postgresql://${POSTGRES_HOST:localhost}:${POSTGRES_PORT:5432}/${POSTGRES_DB:identityDB}?ApplicationName=identity-service${APPLICATION_NAME_SUFFIX:}
    username: ${POSTGRES_USER:root}
    password: ${POSTGRES_PASSWORD:changeme}
    binarycontentdb:
      url: jdbc:postgresql://${BINARY_CONTENT_DB_HOST:localhost}:${BINARY_CONTENT_DB_PORT:5432}/${BINARY_CONTENT_DB_NAME:binarycontentdb}?currentSchema=public
      username: ${BINARY_CONTENT_DB_USERNAME:postgres}
      password: ${BINARY_CONTENT_DB_PASSWORD:nimble}
      driverClassName: org.postgresql.Driver
    test-on-borrow: true
    test-while-idle: true
    remove-abandoned: false #making this false since some of the queries take too much time and abandoning connections causes an error in such cases
    log-abandoned: true
    initial-size: 3
    max-active: 55
    max-idle: 3
    min-idle: 3
    max-wait: 90000
    time-between-eviction-runs-millis: 30000
    min-evictable-idle-time-millis: 60000
    validation-query: "SELECT 1;" # Validation query must be set in order to test connections
    dbcp:
      default-auto-commit: false
  messages:
    encoding: ISO-8859-1
  mail:
    debug: ${MAIL_DEBUG:false}  # disable printing email to log output
    host: ${SMTP_HOST:localhost}
    port: ${SMTP_PORT:25}
    defaultFrom: ${SMTP_DEFAULT_FROM:}
    username: ${SMTP_USERNAME:}
    password: ${SMTP_PASSWORD:}
    smtp.auth: ${SMTP_AUTH:true}
    properties.mail.smtp.starttls.enable: ${SMTP_STARTTLS:true}
    platformName : ${MAIL_PLATFORM_NAME:NIMBLE}
    languages: ${MAIL_TEMPLATE_LANGUAGES:en,es}
  jackson:
    default-property-inclusion: NON_NULL
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
    consumer:
      group-id: identity-service:${KAFKA_CONSUMER_GROUP_ID_SUFFIX:}
    properties:
      sasl:
        jaas:
          config: ${KAFKA_JAAS_CONFIG}
  http:
    multipart:
      max-file-size: 10Mb
      max-request-size: 10Mb

logstash:
  uri: ${LOGSTASH_URI:localhost:5000}

nimble:
  defaultLanguageID: ENGLISH
  corsEnabled: ${CORS_ENBALED:false}
  uaa:
    url: ${UAA_URI:http://localhost:9090}
    clientid: ${UAA_CLIENT_ID:sultans}
    clientsecret: ${UAA_CLIENT_SECRET:sultanssecret}
  keycloak:
    serverUrl: ${KEYCLOAK_URL:http://localhost:10096/auth}
    realm: ${KEYCLOAK_REALM:master}
    public-key: ${KEYCLOAK_PUBLIC_KEY}
    admin:
      username: ${KEYCLOAK_ADMIN_USERNAME:admin}
      password: ${KEYCLOAK_ADMIN_PASSWORD:password}
      cliendId: ${KEYCLOAK_ADMIN_CLIENT_ID:admin-cli}
      cliendSecret: ${KEYCLOAK_ADMIN_CLIENT_SECRET}
  oauth:
    client:
      cliendId: ${OAUTH_CLIENT_ID:nimble-client}
      cliendSecret: ${OAUTH_CLIENT_SECRET}
      accessTokenUri: ${OAUTH_CLIENT_ACCESSTOKEN_URI}
    federationClient:
      clientId: ${OAUTH_FEDERATION_CLIENT_ID:test-client}
      clientSecret: ${OAUTH_FEDERATION_CLIENT_SECRET:1234}
      accessTokenUri: ${OAUTH_FEDERATION_CLIENT_ACCESSTOKEN_URI:http://nimble-staging.salzburgresearch.at:8080/auth/realms/master/protocol/openid-connect/token}
      redirectUri: ${OAUTH_FEDERATION_CLIENT_REDIRECT_URI:http://localhost:9092/}
    eFactoryClient:
      clientId: ${OAUTH_EFACTORY_CLIENT_ID:}
      clientSecret: ${OAUTH_EFACTORY_CLIENT_SECRET:}
      accessTokenUri: ${OAUTH_EFACTORY_CLIENT_ACCESSTOKEN_URI:}
      userDetailsUri: ${OAUTH_EFACTORY_USER_DETAILS_URI:}
    identityProvider:
      eFactory: ${OAUTH_IDENTITY_PROVIDER_EFACTORY:EFS}
  frontend:
    url: ${FRONTEND_URL:http://localhost:9092}
    registration:
      url: ${FRONTEND_REGISTRATION_URL:#/user-mgmt/registration}
    company-details:
      url: ${FRONTEND_COMPANY_DETAILS_URL:#/user-mgmt/company-details}
  kafka:
    topics:
      companyUpdates: ${KAFKA_TOPIC_COMPANY_UPDATES:company-updates}
      ratingsUpdates: ${KAFKA_TOPIC_BUSINESS_PROCESS_UPDATES:business-process-updates-staging}
  binary-content:
    url: ${IDENTITY_BINARY_CONTENT_URL:IdentityBinaryContentUri:}
  supportEmail: ${SUPPORT_EMAIL:nimble-support@salzburgresearch.at}
  companyDataUpdateEmail: ${COMPATA_DATA_UPDATE_EMAIL:}
  rocketChat:
    isEnabled: ${ROCKET_CHAT:false}
    chatServiceURL: ${CHAT_SERVICE_URL:http://localhost:8095}
    url: ${ROCKET_CHAT_URL:http://localhost:3000}
    user: ${ROCKET_CHAT_USER:nimble@gmail.com}
    password: ${ROCKET_CHAT_PASSWORD:123456}
  indexing:
    url: ${INDEXING_SERVICE_URL:http://localhost:8090}
    federated-index-enabled: ${FEDERATED_INDEX_ENABLED:false}
    federated-index-url: ${FEDERATED_INDEXING_SERVICE_URL:}
  catalogue-service:
    url: ${CATALOGUE_SERVICE_URL:http://localhost:8095}
  business-process-service:
    url: ${BUSINESS_PROCESS_SERVICE_URL:http://localhost:8081}
  platformName : ${PLATFORM_NAME:Staging}
  platformHost : ${IDENTITY_SERVICE_URL:http://localhost:9096}
  federation-instance-id: ${FEDERATION_INSTANCE_ID}
  stripe:
    secretKey: ${STRIPE_SECRET_KEY:}
    refreshUrl: ${STRIPE_REFRESH_URL:http://localhost:9092/#/user-mgmt/company-settings}
    returnUrl: ${STRIPE_RETURN_URL:http://localhost:9092/#/user-mgmt/company-settings}
  delegate-service:
    url: ${DELEGATE_SERVICE_URL:}

hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 300000
  threadpool:
    default:
      coreSize: 300
      maxQueueSize: -1

management:
  health:
    mail:
      enabled: ${EMAIL_HEALTH_ENABLED:true}
    solr:
      enabled: false

---

spring:
  profiles: local_dev
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        temp:
          use_jdbc_metadata_defaults: true
  h2:
    console:
      enabled: true
      path: /h2-console
  datasource:
    name: identitydb
    driverClassName: org.h2.Driver
    url: jdbc:h2:file:~/identitydb_h2;
    initialize: false
    username: sa
    password:
    binarycontentdb:
      url: jdbc:h2:mem:db2;AUTO_RECONNECT=TRUE;DB_CLOSE_DELAY=-1;INIT=create schema IF NOT EXISTS APPS
      username: sa
      password:
      driverClassName: org.h2.Driver
  mail:
    debug: true  # prints email to log output
    host: localhost # in-v3.mailjet.com
    port: 8465 # 465

nimble:
  corsEnabled: true

---

spring:
  profiles: test
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: update
  h2:
    console:
      enabled: false
  datasource:
    name: channeldb
    driverClassName: org.h2.Driver
    url: jdbc:h2:mem:channeldb
    initialize: true
    username: sa
    password:
    binarycontentdb:
      url: jdbc:h2:mem:binarycontentdb
      username: sa
      password:
      driverClassName: org.h2.Driver
  kafka:
    bootstrap-servers: ${spring.embedded.kafka.brokers}
    consumer:
      group-id: "test-identity-service"
    properties:
      sasl:
        jaas:
          config: ""
nimble:
  federation-instance-id: TEST_INSTANCE
